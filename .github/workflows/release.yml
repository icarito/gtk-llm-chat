name: Create GitHub Release

on:
  push:
    tags:
      - '*'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-mark hold firefox* linux-headers* linux-image* grub* > /dev/null
          sudo apt update
          sudo apt upgrade
          sudo apt install desktop-file-utils
          sudo apt-get install -y build-essential ninja-build libgtk-4-dev \
          sassc pkg-config git cmake appstream fuse libfuse2 zsync curl python3-pip libglib2.0-dev libchafa-dev
          wget http://ftp.gnome.org/pub/gnome/sources/pango/1.56/pango-1.56.1.tar.xz
          tar -xf pango-1.56.1.tar.xz && cd pango-1.56.1 && ./configure && make && sudo make install
          wget https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.15.0.tar.gz
          tar -xzf fontconfig-2.15.0.tar.gz && cd fontconfig-2.15.0 && ./configure && make && sudo make install
          sudo ./linux/bootstrap.sh
      - name: Install Meson
        run: |
          python3 -m pip install --upgrade meson
      - name: Build GTK4 from source
        run: |
          git clone https://gitlab.gnome.org/GNOME/gtk.git --depth=1
          cd gtk
          meson setup build -Dbuildtype=release -Dprefix=/opt/gtk
          ninja -C build
          sudo ninja -C build install
      - name: Build and install libadwaita
        run: |
          git clone https://gitlab.gnome.org/GNOME/libadwaita.git
          cd libadwaita
          git checkout 1.3.0
          meson setup _build -Dexamples=false -Dtests=false
          meson compile -C _build
          sudo meson install -C _build
          cd ..
      - name: Set up environment
        run: |
          cp .env.ci .env
      - name: Build package
        run: |
          python3 build-ci.py
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist
          path: dist/

  build-windows:
    name: Build for Windows
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
      - name: Install dependencies
        run: |
          ./windows/bootstrap.sh
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow
      - name: Set up environment
        run: |
          cp .env.ci .env
      - name: Build package
        run: |
          python3 build-ci.py
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/

  build-macos:
    name: Build for macOS
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          ./macos/bootstrap.sh
          python3 -m pip install pycairo
          python3 -m pip install PyGObject
      - name: Set up environment
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
        run: |
          cp .env.ci .env
          # NOTE: Comment out or remove the following commands to disable code signing and notarization
#           # Decode certificate
#           echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
#           # Create keychain
#           security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
#           security default-keychain -s build.keychain
#           security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
#           security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
#           security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
#           # Create keychain profile
#           xcrun notarytool store-credentials "notarytool-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"
#           # Store info in environment file
#           echo 'CERT="'$MACOS_CERTIFICATE_NAME'"' >> .env
#           echo 'KEYC=notarytool-profile' >> .env
      - name: Build package
        run: |
          python3 build-ci.py
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/

  build-macos-arm:
    name: Build for macOS ARM
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          # Workaround for externally-managed-environment error
          python3 -m pip config --global set global.break-system-packages true
          ./macos/bootstrap.sh
          python3 -m pip install pycairo
          python3 -m pip install PyGObject
      - name: Set up environment
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
        run: |
          cp .env.ci .env
          # NOTE: Comment out or remove the following commands to disable code signing and notarization
#           # Decode certificate
#           echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
#           # Create keychain
#           security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
#           security default-keychain -s build.keychain
#           security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
#           security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
#           security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
#           # Create keychain profile
#           xcrun notarytool store-credentials "notarytool-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"
#           # Store info in environment file
#           echo 'CERT="'$MACOS_CERTIFICATE_NAME'"' >> .env
#           echo 'KEYC=notarytool-profile' >> .env
      - name: Build package
        run: |
          python3 build-ci.py
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm-dist
          path: dist/

  github-release:
    name: GitHub Release
    needs: [build-linux, build-windows, build-macos, build-macos-arm]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download Linux dist
        uses: actions/download-artifact@v4
        with:
          name: linux-dist
          path: dist/
      - name: Download Windows dist
        uses: actions/download-artifact@v4
        with:
          name: windows-dist
          path: dist/
      - name: Download macOS dist
        uses: actions/download-artifact@v4
        with:
          name: macos-dist
          path: dist/
      - name: Download macOS ARM dist
        uses: actions/download-artifact@v4
        with:
          name: macos-arm-dist
          path: dist/
      - name: Create GitHub Pre-release
        if: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'dev') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --generate-notes --prerelease
      - name: Create GitHub Release
        if: ${{ !(contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'dev') || contains(github.ref_name, 'test')) }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --generate-notes
      - name: Upload dists to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
